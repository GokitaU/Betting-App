// <auto-generated />
using System;
using BettingApp.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BettingApp.Data.Migrations
{
    [DbContext(typeof(BettingAppContext))]
    [Migration("20190904182523_FixedBetType")]
    partial class FixedBetType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BettingApp.Data.Entities.Models.BetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("BetTypes");
                });

            modelBuilder.Entity("BettingApp.Data.Entities.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndedAt");

                    b.Property<int>("SportId");

                    b.Property<DateTime>("StartsAt");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("BettingApp.Data.Entities.Models.Pair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BetTypeId");

                    b.Property<bool>("IsTopOffer");

                    b.Property<int>("MatchId");

                    b.Property<double>("Quota");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("BetTypeId");

                    b.HasIndex("MatchId");

                    b.ToTable("Pairs");
                });

            modelBuilder.Entity("BettingApp.Data.Entities.Models.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("BettingApp.Data.Entities.Models.SportBetType", b =>
                {
                    b.Property<int>("SportId");

                    b.Property<int>("BetTypeId");

                    b.HasKey("SportId", "BetTypeId");

                    b.HasIndex("BetTypeId");

                    b.ToTable("SportBetTypes");
                });

            modelBuilder.Entity("BettingApp.Data.Entities.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("BettingApp.Data.Entities.Models.TeamMatch", b =>
                {
                    b.Property<int>("TeamId");

                    b.Property<int>("MatchId");

                    b.Property<bool>("IsHome");

                    b.Property<int>("Score");

                    b.HasKey("TeamId", "MatchId");

                    b.HasIndex("MatchId");

                    b.ToTable("TeamMatches");
                });

            modelBuilder.Entity("BettingApp.Data.Entities.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("IssuedAt");

                    b.Property<double>("MoneyBet");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<double>("TotalQuota");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("BettingApp.Data.Entities.Models.TicketPair", b =>
                {
                    b.Property<int>("TicketId");

                    b.Property<int>("PairId");

                    b.HasKey("TicketId", "PairId");

                    b.HasIndex("PairId");

                    b.ToTable("TicketPairs");
                });

            modelBuilder.Entity("BettingApp.Data.Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CurrentFunds");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BettingApp.Data.Entities.Models.Match", b =>
                {
                    b.HasOne("BettingApp.Data.Entities.Models.Sport", "Sport")
                        .WithMany("Matches")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BettingApp.Data.Entities.Models.Pair", b =>
                {
                    b.HasOne("BettingApp.Data.Entities.Models.BetType", "BetType")
                        .WithMany("Pairs")
                        .HasForeignKey("BetTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BettingApp.Data.Entities.Models.Match", "Match")
                        .WithMany("Pairs")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BettingApp.Data.Entities.Models.SportBetType", b =>
                {
                    b.HasOne("BettingApp.Data.Entities.Models.BetType", "BetType")
                        .WithMany("SportBetTypes")
                        .HasForeignKey("BetTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BettingApp.Data.Entities.Models.Sport", "Sport")
                        .WithMany("SportBetTypes")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BettingApp.Data.Entities.Models.TeamMatch", b =>
                {
                    b.HasOne("BettingApp.Data.Entities.Models.Match", "Match")
                        .WithMany("TeamMatches")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BettingApp.Data.Entities.Models.Team", "Team")
                        .WithMany("TeamMatches")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BettingApp.Data.Entities.Models.Ticket", b =>
                {
                    b.HasOne("BettingApp.Data.Entities.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BettingApp.Data.Entities.Models.TicketPair", b =>
                {
                    b.HasOne("BettingApp.Data.Entities.Models.Pair", "Pair")
                        .WithMany("TicketPairs")
                        .HasForeignKey("PairId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BettingApp.Data.Entities.Models.Ticket", "Ticket")
                        .WithMany("TicketPairs")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
